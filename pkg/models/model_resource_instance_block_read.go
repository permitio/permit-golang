/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ResourceInstanceBlockRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceInstanceBlockRead{}

// ResourceInstanceBlockRead struct for ResourceInstanceBlockRead
type ResourceInstanceBlockRead struct {
	// A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.
	Key string `json:"key"`
	// the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.
	Tenant string `json:"tenant"`
	// the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.
	Resource string `json:"resource"`
	// Arbitrary resource attributes that will be used to enforce attribute-based access control policies.
	Attributes map[string]interface{} `json:"attributes,omitempty"`
}

// NewResourceInstanceBlockRead instantiates a new ResourceInstanceBlockRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInstanceBlockRead(key string, tenant string, resource string) *ResourceInstanceBlockRead {
	this := ResourceInstanceBlockRead{}
	this.Key = key
	this.Tenant = tenant
	this.Resource = resource
	return &this
}

// NewResourceInstanceBlockReadWithDefaults instantiates a new ResourceInstanceBlockRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInstanceBlockReadWithDefaults() *ResourceInstanceBlockRead {
	this := ResourceInstanceBlockRead{}
	return &this
}

// GetKey returns the Key field value
func (o *ResourceInstanceBlockRead) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceBlockRead) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ResourceInstanceBlockRead) SetKey(v string) {
	o.Key = v
}

// GetTenant returns the Tenant field value
func (o *ResourceInstanceBlockRead) GetTenant() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceBlockRead) GetTenantOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tenant, true
}

// SetTenant sets field value
func (o *ResourceInstanceBlockRead) SetTenant(v string) {
	o.Tenant = v
}

// GetResource returns the Resource field value
func (o *ResourceInstanceBlockRead) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *ResourceInstanceBlockRead) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *ResourceInstanceBlockRead) SetResource(v string) {
	o.Resource = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ResourceInstanceBlockRead) GetAttributes() map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceInstanceBlockRead) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ResourceInstanceBlockRead) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *ResourceInstanceBlockRead) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o ResourceInstanceBlockRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceInstanceBlockRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["tenant"] = o.Tenant
	toSerialize["resource"] = o.Resource
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableResourceInstanceBlockRead struct {
	value *ResourceInstanceBlockRead
	isSet bool
}

func (v NullableResourceInstanceBlockRead) Get() *ResourceInstanceBlockRead {
	return v.value
}

func (v *NullableResourceInstanceBlockRead) Set(val *ResourceInstanceBlockRead) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInstanceBlockRead) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInstanceBlockRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInstanceBlockRead(val *ResourceInstanceBlockRead) *NullableResourceInstanceBlockRead {
	return &NullableResourceInstanceBlockRead{value: val, isSet: true}
}

func (v NullableResourceInstanceBlockRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInstanceBlockRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
