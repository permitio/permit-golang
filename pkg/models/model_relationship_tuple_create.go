/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RelationshipTupleCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipTupleCreate{}

// RelationshipTupleCreate struct for RelationshipTupleCreate
type RelationshipTupleCreate struct {
	// the resource instance assigned the new relation (accepts either the resource instance id or resource_key:resource_instance_key)
	Subject string `json:"subject"`
	// the relation to assign between the subject and object
	Relation string `json:"relation"`
	// the resource instance on which the new relation is assigned (accepts either the resource instance id or resource_key:resource_instance_key)
	Object string `json:"object"`
	// The tenant the subject and object belong to, if the resource instances don't exist yet, the tenant is required to create them. otherwise it is ignored
	Tenant *string `json:"tenant,omitempty"`
}

// NewRelationshipTupleCreate instantiates a new RelationshipTupleCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipTupleCreate(subject string, relation string, object string) *RelationshipTupleCreate {
	this := RelationshipTupleCreate{}
	this.Subject = subject
	this.Relation = relation
	this.Object = object
	return &this
}

// NewRelationshipTupleCreateWithDefaults instantiates a new RelationshipTupleCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipTupleCreateWithDefaults() *RelationshipTupleCreate {
	this := RelationshipTupleCreate{}
	return &this
}

// GetSubject returns the Subject field value
func (o *RelationshipTupleCreate) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleCreate) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *RelationshipTupleCreate) SetSubject(v string) {
	o.Subject = v
}

// GetRelation returns the Relation field value
func (o *RelationshipTupleCreate) GetRelation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Relation
}

// GetRelationOk returns a tuple with the Relation field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleCreate) GetRelationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relation, true
}

// SetRelation sets field value
func (o *RelationshipTupleCreate) SetRelation(v string) {
	o.Relation = v
}

// GetObject returns the Object field value
func (o *RelationshipTupleCreate) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleCreate) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *RelationshipTupleCreate) SetObject(v string) {
	o.Object = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *RelationshipTupleCreate) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipTupleCreate) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *RelationshipTupleCreate) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *RelationshipTupleCreate) SetTenant(v string) {
	o.Tenant = &v
}

func (o RelationshipTupleCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipTupleCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subject"] = o.Subject
	toSerialize["relation"] = o.Relation
	toSerialize["object"] = o.Object
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	return toSerialize, nil
}

type NullableRelationshipTupleCreate struct {
	value *RelationshipTupleCreate
	isSet bool
}

func (v NullableRelationshipTupleCreate) Get() *RelationshipTupleCreate {
	return v.value
}

func (v *NullableRelationshipTupleCreate) Set(val *RelationshipTupleCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipTupleCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipTupleCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipTupleCreate(val *RelationshipTupleCreate) *NullableRelationshipTupleCreate {
	return &NullableRelationshipTupleCreate{value: val, isSet: true}
}

func (v NullableRelationshipTupleCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipTupleCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
