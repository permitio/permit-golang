/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"github.com/permitio/permit-golang/pkg/models"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// RelationshipTuplesAPIService RelationshipTuplesAPI service
type RelationshipTuplesAPIService service

type ApiBulkCreateRelationshipTuplesRequest struct {
	ctx                                  context.Context
	ApiService                           *RelationshipTuplesAPIService
	projId                               string
	envId                                string
	relationshipTupleCreateBulkOperation *models.RelationshipTupleCreateBulkOperation
	permitSession                        *string
}

func (r ApiBulkCreateRelationshipTuplesRequest) RelationshipTupleCreateBulkOperation(relationshipTupleCreateBulkOperation models.RelationshipTupleCreateBulkOperation) ApiBulkCreateRelationshipTuplesRequest {
	r.relationshipTupleCreateBulkOperation = &relationshipTupleCreateBulkOperation
	return r
}

func (r ApiBulkCreateRelationshipTuplesRequest) PermitSession(permitSession string) ApiBulkCreateRelationshipTuplesRequest {
	r.permitSession = &permitSession
	return r
}

func (r ApiBulkCreateRelationshipTuplesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.BulkCreateRelationshipTuplesExecute(r)
}

/*
BulkCreateRelationshipTuples Bulk Create Relationship Tuples

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@return ApiBulkCreateRelationshipTuplesRequest
*/
func (a *RelationshipTuplesAPIService) BulkCreateRelationshipTuples(ctx context.Context, projId string, envId string) ApiBulkCreateRelationshipTuplesRequest {
	return ApiBulkCreateRelationshipTuplesRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *RelationshipTuplesAPIService) BulkCreateRelationshipTuplesExecute(r ApiBulkCreateRelationshipTuplesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationshipTuplesAPIService.BulkCreateRelationshipTuples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationshipTupleCreateBulkOperation == nil {
		return localVarReturnValue, nil, reportError("relationshipTupleCreateBulkOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationshipTupleCreateBulkOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkDeleteRelationshipTuplesRequest struct {
	ctx                                  context.Context
	ApiService                           *RelationshipTuplesAPIService
	projId                               string
	envId                                string
	relationshipTupleDeleteBulkOperation *models.RelationshipTupleDeleteBulkOperation
	permitSession                        *string
}

func (r ApiBulkDeleteRelationshipTuplesRequest) RelationshipTupleDeleteBulkOperation(relationshipTupleDeleteBulkOperation models.RelationshipTupleDeleteBulkOperation) ApiBulkDeleteRelationshipTuplesRequest {
	r.relationshipTupleDeleteBulkOperation = &relationshipTupleDeleteBulkOperation
	return r
}

func (r ApiBulkDeleteRelationshipTuplesRequest) PermitSession(permitSession string) ApiBulkDeleteRelationshipTuplesRequest {
	r.permitSession = &permitSession
	return r
}

func (r ApiBulkDeleteRelationshipTuplesRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.BulkDeleteRelationshipTuplesExecute(r)
}

/*
BulkDeleteRelationshipTuples Bulk Delete Relationship Tuples

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@return ApiBulkDeleteRelationshipTuplesRequest
*/
func (a *RelationshipTuplesAPIService) BulkDeleteRelationshipTuples(ctx context.Context, projId string, envId string) ApiBulkDeleteRelationshipTuplesRequest {
	return ApiBulkDeleteRelationshipTuplesRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *RelationshipTuplesAPIService) BulkDeleteRelationshipTuplesExecute(r ApiBulkDeleteRelationshipTuplesRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationshipTuplesAPIService.BulkDeleteRelationshipTuples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/facts/{proj_id}/{env_id}/relationship_tuples/bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationshipTupleDeleteBulkOperation == nil {
		return localVarReturnValue, nil, reportError("relationshipTupleDeleteBulkOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationshipTupleDeleteBulkOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRelationshipTupleRequest struct {
	ctx                     context.Context
	ApiService              *RelationshipTuplesAPIService
	projId                  string
	envId                   string
	relationshipTupleCreate *models.RelationshipTupleCreate
	permitSession           *string
}

func (r ApiCreateRelationshipTupleRequest) RelationshipTupleCreate(relationshipTupleCreate models.RelationshipTupleCreate) ApiCreateRelationshipTupleRequest {
	r.relationshipTupleCreate = &relationshipTupleCreate
	return r
}

func (r ApiCreateRelationshipTupleRequest) PermitSession(permitSession string) ApiCreateRelationshipTupleRequest {
	r.permitSession = &permitSession
	return r
}

func (r ApiCreateRelationshipTupleRequest) Execute() (*models.RelationshipTupleRead, *http.Response, error) {
	return r.ApiService.CreateRelationshipTupleExecute(r)
}

/*
CreateRelationshipTuple Create Relationship Tuple

Create a relationship between two resource instances using a relation.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@return ApiCreateRelationshipTupleRequest
*/
func (a *RelationshipTuplesAPIService) CreateRelationshipTuple(ctx context.Context, projId string, envId string) ApiCreateRelationshipTupleRequest {
	return ApiCreateRelationshipTupleRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
	}
}

// Execute executes the request
//
//	@return RelationshipTupleRead
func (a *RelationshipTuplesAPIService) CreateRelationshipTupleExecute(r ApiCreateRelationshipTupleRequest) (*models.RelationshipTupleRead, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *models.RelationshipTupleRead
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationshipTuplesAPIService.CreateRelationshipTuple")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/facts/{proj_id}/{env_id}/relationship_tuples"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationshipTupleCreate == nil {
		return localVarReturnValue, nil, reportError("relationshipTupleCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationshipTupleCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRelationshipTupleRequest struct {
	ctx                     context.Context
	ApiService              *RelationshipTuplesAPIService
	projId                  string
	envId                   string
	relationshipTupleDelete *models.RelationshipTupleDelete
	permitSession           *string
}

func (r ApiDeleteRelationshipTupleRequest) RelationshipTupleDelete(relationshipTupleDelete models.RelationshipTupleDelete) ApiDeleteRelationshipTupleRequest {
	r.relationshipTupleDelete = &relationshipTupleDelete
	return r
}

func (r ApiDeleteRelationshipTupleRequest) PermitSession(permitSession string) ApiDeleteRelationshipTupleRequest {
	r.permitSession = &permitSession
	return r
}

func (r ApiDeleteRelationshipTupleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRelationshipTupleExecute(r)
}

/*
DeleteRelationshipTuple Delete Relationship Tuple

Delete a relationship between two resource instances.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@return ApiDeleteRelationshipTupleRequest
*/
func (a *RelationshipTuplesAPIService) DeleteRelationshipTuple(ctx context.Context, projId string, envId string) ApiDeleteRelationshipTupleRequest {
	return ApiDeleteRelationshipTupleRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
	}
}

// Execute executes the request
func (a *RelationshipTuplesAPIService) DeleteRelationshipTupleExecute(r ApiDeleteRelationshipTupleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationshipTuplesAPIService.DeleteRelationshipTuple")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/facts/{proj_id}/{env_id}/relationship_tuples"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationshipTupleDelete == nil {
		return nil, reportError("relationshipTupleDelete is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationshipTupleDelete
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListRelationshipTuplesRequest struct {
	ctx           context.Context
	ApiService    *RelationshipTuplesAPIService
	projId        string
	envId         string
	detailed      *bool
	page          *int32
	perPage       *int32
	tenant        *string
	subject       *string
	relation      *string
	object        *string
	permitSession *string
}

// If true, will return the full subject and object resource instances.
func (r ApiListRelationshipTuplesRequest) Detailed(detailed bool) ApiListRelationshipTuplesRequest {
	r.detailed = &detailed
	return r
}

// Page number of the results to fetch, starting at 1.
func (r ApiListRelationshipTuplesRequest) Page(page int32) ApiListRelationshipTuplesRequest {
	r.page = &page
	return r
}

// The number of results per page (max 100).
func (r ApiListRelationshipTuplesRequest) PerPage(perPage int32) ApiListRelationshipTuplesRequest {
	r.perPage = &perPage
	return r
}

// The tenant key or id to filter by
func (r ApiListRelationshipTuplesRequest) Tenant(tenant string) ApiListRelationshipTuplesRequest {
	r.tenant = &tenant
	return r
}

// The subject to filter by, accepts either the resource instance id or resource_type:resource_instance
func (r ApiListRelationshipTuplesRequest) Subject(subject string) ApiListRelationshipTuplesRequest {
	r.subject = &subject
	return r
}

// The relation id or key to filter by
func (r ApiListRelationshipTuplesRequest) Relation(relation string) ApiListRelationshipTuplesRequest {
	r.relation = &relation
	return r
}

// The object to filter by, accepts either the resource instance id or resource_type:resource_instance
func (r ApiListRelationshipTuplesRequest) Object(object string) ApiListRelationshipTuplesRequest {
	r.object = &object
	return r
}

func (r ApiListRelationshipTuplesRequest) PermitSession(permitSession string) ApiListRelationshipTuplesRequest {
	r.permitSession = &permitSession
	return r
}

func (r ApiListRelationshipTuplesRequest) Execute() ([]models.RelationshipTupleRead, *http.Response, error) {
	return r.ApiService.ListRelationshipTuplesExecute(r)
}

/*
ListRelationshipTuples List Relationship Tuples

Lists the relationship tuples defined within an environment.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@return ApiListRelationshipTuplesRequest
*/
func (a *RelationshipTuplesAPIService) ListRelationshipTuples(ctx context.Context, projId string, envId string) ApiListRelationshipTuplesRequest {
	return ApiListRelationshipTuplesRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
	}
}

// Execute executes the request
//
//	@return []RelationshipTupleRead
func (a *RelationshipTuplesAPIService) ListRelationshipTuplesExecute(r ApiListRelationshipTuplesRequest) ([]models.RelationshipTupleRead, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []models.RelationshipTupleRead
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationshipTuplesAPIService.ListRelationshipTuples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/facts/{proj_id}/{env_id}/relationship_tuples"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.detailed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detailed", r.detailed, "")
	} else {
		var defaultValue bool = false
		r.detailed = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	} else {
		var defaultValue int32 = 30
		r.perPage = &defaultValue
	}
	if r.tenant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", r.tenant, "")
	}
	if r.subject != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subject", r.subject, "")
	}
	if r.relation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relation", r.relation, "")
	}
	if r.object != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object", r.object, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
