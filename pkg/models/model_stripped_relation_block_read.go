/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the StrippedRelationBlockRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StrippedRelationBlockRead{}

// StrippedRelationBlockRead struct for StrippedRelationBlockRead
type StrippedRelationBlockRead struct {
	// A URL-friendly name of the relation (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the relation.
	Key string `json:"key"`
	// The name of the relation
	Name string `json:"name"`
	// An optional longer description of what this relation represents in your system
	Description *string `json:"description,omitempty"`
}

// NewStrippedRelationBlockRead instantiates a new StrippedRelationBlockRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrippedRelationBlockRead(key string, name string) *StrippedRelationBlockRead {
	this := StrippedRelationBlockRead{}
	this.Key = key
	this.Name = name
	return &this
}

// NewStrippedRelationBlockReadWithDefaults instantiates a new StrippedRelationBlockRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrippedRelationBlockReadWithDefaults() *StrippedRelationBlockRead {
	this := StrippedRelationBlockRead{}
	return &this
}

// GetKey returns the Key field value
func (o *StrippedRelationBlockRead) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *StrippedRelationBlockRead) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *StrippedRelationBlockRead) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *StrippedRelationBlockRead) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StrippedRelationBlockRead) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StrippedRelationBlockRead) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StrippedRelationBlockRead) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrippedRelationBlockRead) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StrippedRelationBlockRead) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StrippedRelationBlockRead) SetDescription(v string) {
	o.Description = &v
}

func (o StrippedRelationBlockRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StrippedRelationBlockRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableStrippedRelationBlockRead struct {
	value *StrippedRelationBlockRead
	isSet bool
}

func (v NullableStrippedRelationBlockRead) Get() *StrippedRelationBlockRead {
	return v.value
}

func (v *NullableStrippedRelationBlockRead) Set(val *StrippedRelationBlockRead) {
	v.value = val
	v.isSet = true
}

func (v NullableStrippedRelationBlockRead) IsSet() bool {
	return v.isSet
}

func (v *NullableStrippedRelationBlockRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrippedRelationBlockRead(val *StrippedRelationBlockRead) *NullableStrippedRelationBlockRead {
	return &NullableStrippedRelationBlockRead{value: val, isSet: true}
}

func (v NullableStrippedRelationBlockRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrippedRelationBlockRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
