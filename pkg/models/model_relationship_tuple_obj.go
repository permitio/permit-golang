/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RelationshipTupleObj type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipTupleObj{}

// RelationshipTupleObj struct for RelationshipTupleObj
type RelationshipTupleObj struct {
	SubjectStr  string `json:"subject_str"`
	RelationStr string `json:"relation_str"`
	ObjectStr   string `json:"object_str"`
}

// NewRelationshipTupleObj instantiates a new RelationshipTupleObj object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipTupleObj(subjectStr string, relationStr string, objectStr string) *RelationshipTupleObj {
	this := RelationshipTupleObj{}
	this.SubjectStr = subjectStr
	this.RelationStr = relationStr
	this.ObjectStr = objectStr
	return &this
}

// NewRelationshipTupleObjWithDefaults instantiates a new RelationshipTupleObj object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipTupleObjWithDefaults() *RelationshipTupleObj {
	this := RelationshipTupleObj{}
	return &this
}

// GetSubjectStr returns the SubjectStr field value
func (o *RelationshipTupleObj) GetSubjectStr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectStr
}

// GetSubjectStrOk returns a tuple with the SubjectStr field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleObj) GetSubjectStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectStr, true
}

// SetSubjectStr sets field value
func (o *RelationshipTupleObj) SetSubjectStr(v string) {
	o.SubjectStr = v
}

// GetRelationStr returns the RelationStr field value
func (o *RelationshipTupleObj) GetRelationStr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelationStr
}

// GetRelationStrOk returns a tuple with the RelationStr field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleObj) GetRelationStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelationStr, true
}

// SetRelationStr sets field value
func (o *RelationshipTupleObj) SetRelationStr(v string) {
	o.RelationStr = v
}

// GetObjectStr returns the ObjectStr field value
func (o *RelationshipTupleObj) GetObjectStr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectStr
}

// GetObjectStrOk returns a tuple with the ObjectStr field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleObj) GetObjectStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectStr, true
}

// SetObjectStr sets field value
func (o *RelationshipTupleObj) SetObjectStr(v string) {
	o.ObjectStr = v
}

func (o RelationshipTupleObj) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipTupleObj) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subject_str"] = o.SubjectStr
	toSerialize["relation_str"] = o.RelationStr
	toSerialize["object_str"] = o.ObjectStr
	return toSerialize, nil
}

type NullableRelationshipTupleObj struct {
	value *RelationshipTupleObj
	isSet bool
}

func (v NullableRelationshipTupleObj) Get() *RelationshipTupleObj {
	return v.value
}

func (v *NullableRelationshipTupleObj) Set(val *RelationshipTupleObj) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipTupleObj) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipTupleObj) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipTupleObj(val *RelationshipTupleObj) *NullableRelationshipTupleObj {
	return &NullableRelationshipTupleObj{value: val, isSet: true}
}

func (v NullableRelationshipTupleObj) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipTupleObj) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
