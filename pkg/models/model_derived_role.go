/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DerivedRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DerivedRole{}

// DerivedRole struct for DerivedRole
type DerivedRole struct {
	Conditions *string                                              `json:"conditions,omitempty"`
	Settings   PermitBackendSchemasSchemaOpalDataDerivationSettings `json:"settings"`
	Rules      []DerivedRoleRule                                    `json:"rules"`
}

// NewDerivedRole instantiates a new DerivedRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDerivedRole(settings PermitBackendSchemasSchemaOpalDataDerivationSettings, rules []DerivedRoleRule) *DerivedRole {
	this := DerivedRole{}
	this.Settings = settings
	this.Rules = rules
	return &this
}

// NewDerivedRoleWithDefaults instantiates a new DerivedRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDerivedRoleWithDefaults() *DerivedRole {
	this := DerivedRole{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DerivedRole) GetConditions() string {
	if o == nil || IsNil(o.Conditions) {
		var ret string
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivedRole) GetConditionsOk() (*string, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DerivedRole) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given string and assigns it to the Conditions field.
func (o *DerivedRole) SetConditions(v string) {
	o.Conditions = &v
}

// GetSettings returns the Settings field value
func (o *DerivedRole) GetSettings() PermitBackendSchemasSchemaOpalDataDerivationSettings {
	if o == nil {
		var ret PermitBackendSchemasSchemaOpalDataDerivationSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *DerivedRole) GetSettingsOk() (*PermitBackendSchemasSchemaOpalDataDerivationSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *DerivedRole) SetSettings(v PermitBackendSchemasSchemaOpalDataDerivationSettings) {
	o.Settings = v
}

// GetRules returns the Rules field value
func (o *DerivedRole) GetRules() []DerivedRoleRule {
	if o == nil {
		var ret []DerivedRoleRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *DerivedRole) GetRulesOk() ([]DerivedRoleRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *DerivedRole) SetRules(v []DerivedRoleRule) {
	o.Rules = v
}

func (o DerivedRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DerivedRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["settings"] = o.Settings
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

type NullableDerivedRole struct {
	value *DerivedRole
	isSet bool
}

func (v NullableDerivedRole) Get() *DerivedRole {
	return v.value
}

func (v *NullableDerivedRole) Set(val *DerivedRole) {
	v.value = val
	v.isSet = true
}

func (v NullableDerivedRole) IsSet() bool {
	return v.isSet
}

func (v *NullableDerivedRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDerivedRole(val *DerivedRole) *NullableDerivedRole {
	return &NullableDerivedRole{value: val, isSet: true}
}

func (v NullableDerivedRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDerivedRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
