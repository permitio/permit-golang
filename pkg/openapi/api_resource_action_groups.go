/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"github.com/permitio/permit-golang/pkg/models"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ResourceActionGroupsApiService ResourceActionGroupsApi service
type ResourceActionGroupsApiService service

type ApiCreateResourceActionGroupRequest struct {
	ctx                       context.Context
	ApiService                *ResourceActionGroupsApiService
	projId                    string
	envId                     string
	resourceId                string
	resourceActionGroupCreate *models.ResourceActionGroupCreate
}

func (r ApiCreateResourceActionGroupRequest) ResourceActionGroupCreate(resourceActionGroupCreate models.ResourceActionGroupCreate) ApiCreateResourceActionGroupRequest {
	r.resourceActionGroupCreate = &resourceActionGroupCreate
	return r
}

func (r ApiCreateResourceActionGroupRequest) Execute() (*models.ResourceActionGroupRead, *http.Response, error) {
	return r.ApiService.CreateResourceActionGroupExecute(r)
}

/*
CreateResourceActionGroup Create Resource Action Group

Creates a new action group that can affect the resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").
	@return ApiCreateResourceActionGroupRequest
*/
func (a *ResourceActionGroupsApiService) CreateResourceActionGroup(ctx context.Context, projId string, envId string, resourceId string) ApiCreateResourceActionGroupRequest {
	return ApiCreateResourceActionGroupRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
		resourceId: resourceId,
	}
}

// Execute executes the request
//
//	@return ResourceActionGroupRead
func (a *ResourceActionGroupsApiService) CreateResourceActionGroupExecute(r ApiCreateResourceActionGroupRequest) (*models.ResourceActionGroupRead, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *models.ResourceActionGroupRead
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceActionGroupsApiService.CreateResourceActionGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceActionGroupCreate == nil {
		return localVarReturnValue, nil, reportError("resourceActionGroupCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceActionGroupCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteResourceActionGroupRequest struct {
	ctx           context.Context
	ApiService    *ResourceActionGroupsApiService
	projId        string
	envId         string
	resourceId    string
	actionGroupId string
}

func (r ApiDeleteResourceActionGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteResourceActionGroupExecute(r)
}

/*
DeleteResourceActionGroup Delete Resource Action Group

Deletes the action and all its related data.
This includes any permissions granted to perform the action.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").
	@param actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \"slug\").
	@return ApiDeleteResourceActionGroupRequest
*/
func (a *ResourceActionGroupsApiService) DeleteResourceActionGroup(ctx context.Context, projId string, envId string, resourceId string, actionGroupId string) ApiDeleteResourceActionGroupRequest {
	return ApiDeleteResourceActionGroupRequest{
		ApiService:    a,
		ctx:           ctx,
		projId:        projId,
		envId:         envId,
		resourceId:    resourceId,
		actionGroupId: actionGroupId,
	}
}

// Execute executes the request
func (a *ResourceActionGroupsApiService) DeleteResourceActionGroupExecute(r ApiDeleteResourceActionGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceActionGroupsApiService.DeleteResourceActionGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"action_group_id"+"}", url.PathEscape(parameterValueToString(r.actionGroupId, "actionGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetResourceActionGroupRequest struct {
	ctx           context.Context
	ApiService    *ResourceActionGroupsApiService
	projId        string
	envId         string
	resourceId    string
	actionGroupId string
}

func (r ApiGetResourceActionGroupRequest) Execute() (*models.ResourceActionGroupRead, *http.Response, error) {
	return r.ApiService.GetResourceActionGroupExecute(r)
}

/*
GetResourceActionGroup Get Resource Action Group

Gets a single action group defined on the resource, if such action exists.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").
	@param actionGroupId Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \"slug\").
	@return ApiGetResourceActionGroupRequest
*/
func (a *ResourceActionGroupsApiService) GetResourceActionGroup(ctx context.Context, projId string, envId string, resourceId string, actionGroupId string) ApiGetResourceActionGroupRequest {
	return ApiGetResourceActionGroupRequest{
		ApiService:    a,
		ctx:           ctx,
		projId:        projId,
		envId:         envId,
		resourceId:    resourceId,
		actionGroupId: actionGroupId,
	}
}

// Execute executes the request
//
//	@return ResourceActionGroupRead
func (a *ResourceActionGroupsApiService) GetResourceActionGroupExecute(r ApiGetResourceActionGroupRequest) (*models.ResourceActionGroupRead, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *models.ResourceActionGroupRead
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceActionGroupsApiService.GetResourceActionGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups/{action_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"action_group_id"+"}", url.PathEscape(parameterValueToString(r.actionGroupId, "actionGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListResourceActionGroupsRequest struct {
	ctx              context.Context
	ApiService       *ResourceActionGroupsApiService
	projId           string
	envId            string
	resourceId       string
	page             *int32
	perPage          *int32
	attributesFilter map[string]interface{}
}

// Page number of the results to fetch, starting at 1.
func (r ApiListResourceActionGroupsRequest) Page(page int32) ApiListResourceActionGroupsRequest {
	r.page = &page
	return r
}

// The number of results per page (max 100).
func (r ApiListResourceActionGroupsRequest) PerPage(perPage int32) ApiListResourceActionGroupsRequest {
	r.perPage = &perPage
	return r
}

// AttributeFilters on the result of the actions list
func (r ApiListResourceActionGroupsRequest) AttributesFilter(attributesFilter map[string]interface{}) ApiListResourceActionGroupsRequest {
	r.attributesFilter = attributesFilter
	return r
}

func (r ApiListResourceActionGroupsRequest) Execute() ([]models.ResourceActionGroupRead, *http.Response, error) {
	return r.ApiService.ListResourceActionGroupsExecute(r)
}

/*
ListResourceActionGroups List Resource Action Groups

Lists all the action groups defined on the resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").
	@return ApiListResourceActionGroupsRequest
*/
func (a *ResourceActionGroupsApiService) ListResourceActionGroups(ctx context.Context, projId string, envId string, resourceId string) ApiListResourceActionGroupsRequest {
	return ApiListResourceActionGroupsRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
		resourceId: resourceId,
	}
}

// Execute executes the request
//
//	@return []ResourceActionGroupRead
func (a *ResourceActionGroupsApiService) ListResourceActionGroupsExecute(r ApiListResourceActionGroupsRequest) ([]models.ResourceActionGroupRead, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []models.ResourceActionGroupRead
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceActionGroupsApiService.ListResourceActionGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/action_groups"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.perPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "per_page", r.perPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
