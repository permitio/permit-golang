/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the PaginatedResultRelationRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedResultRelationRead{}

// PaginatedResultRelationRead struct for PaginatedResultRelationRead
type PaginatedResultRelationRead struct {
	// List of Relations
	Data       []RelationRead `json:"data"`
	TotalCount int32          `json:"total_count"`
	PageCount  *int32         `json:"page_count,omitempty"`
}

// NewPaginatedResultRelationRead instantiates a new PaginatedResultRelationRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedResultRelationRead(data []RelationRead, totalCount int32) *PaginatedResultRelationRead {
	this := PaginatedResultRelationRead{}
	this.Data = data
	this.TotalCount = totalCount
	var pageCount int32 = 0
	this.PageCount = &pageCount
	return &this
}

// NewPaginatedResultRelationReadWithDefaults instantiates a new PaginatedResultRelationRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedResultRelationReadWithDefaults() *PaginatedResultRelationRead {
	this := PaginatedResultRelationRead{}
	var pageCount int32 = 0
	this.PageCount = &pageCount
	return &this
}

// GetData returns the Data field value
func (o *PaginatedResultRelationRead) GetData() []RelationRead {
	if o == nil {
		var ret []RelationRead
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PaginatedResultRelationRead) GetDataOk() ([]RelationRead, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PaginatedResultRelationRead) SetData(v []RelationRead) {
	o.Data = v
}

// GetTotalCount returns the TotalCount field value
func (o *PaginatedResultRelationRead) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *PaginatedResultRelationRead) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *PaginatedResultRelationRead) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetPageCount returns the PageCount field value if set, zero value otherwise.
func (o *PaginatedResultRelationRead) GetPageCount() int32 {
	if o == nil || IsNil(o.PageCount) {
		var ret int32
		return ret
	}
	return *o.PageCount
}

// GetPageCountOk returns a tuple with the PageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedResultRelationRead) GetPageCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PageCount) {
		return nil, false
	}
	return o.PageCount, true
}

// HasPageCount returns a boolean if a field has been set.
func (o *PaginatedResultRelationRead) HasPageCount() bool {
	if o != nil && !IsNil(o.PageCount) {
		return true
	}

	return false
}

// SetPageCount gets a reference to the given int32 and assigns it to the PageCount field.
func (o *PaginatedResultRelationRead) SetPageCount(v int32) {
	o.PageCount = &v
}

func (o PaginatedResultRelationRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedResultRelationRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["total_count"] = o.TotalCount
	if !IsNil(o.PageCount) {
		toSerialize["page_count"] = o.PageCount
	}
	return toSerialize, nil
}

type NullablePaginatedResultRelationRead struct {
	value *PaginatedResultRelationRead
	isSet bool
}

func (v NullablePaginatedResultRelationRead) Get() *PaginatedResultRelationRead {
	return v.value
}

func (v *NullablePaginatedResultRelationRead) Set(val *PaginatedResultRelationRead) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedResultRelationRead) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedResultRelationRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedResultRelationRead(val *PaginatedResultRelationRead) *NullablePaginatedResultRelationRead {
	return &NullablePaginatedResultRelationRead{value: val, isSet: true}
}

func (v NullablePaginatedResultRelationRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedResultRelationRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
