/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RelationshipTupleBlockRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationshipTupleBlockRead{}

// RelationshipTupleBlockRead struct for RelationshipTupleBlockRead
type RelationshipTupleBlockRead struct {
	// resource_key:resource_instance_key of the subject
	Subject string `json:"subject"`
	// key of the assigned relation
	Relation string `json:"relation"`
	// resource_key:resource_instance_key of the object
	Object string `json:"object"`
}

// NewRelationshipTupleBlockRead instantiates a new RelationshipTupleBlockRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipTupleBlockRead(subject string, relation string, object string) *RelationshipTupleBlockRead {
	this := RelationshipTupleBlockRead{}
	this.Subject = subject
	this.Relation = relation
	this.Object = object
	return &this
}

// NewRelationshipTupleBlockReadWithDefaults instantiates a new RelationshipTupleBlockRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipTupleBlockReadWithDefaults() *RelationshipTupleBlockRead {
	this := RelationshipTupleBlockRead{}
	return &this
}

// GetSubject returns the Subject field value
func (o *RelationshipTupleBlockRead) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleBlockRead) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *RelationshipTupleBlockRead) SetSubject(v string) {
	o.Subject = v
}

// GetRelation returns the Relation field value
func (o *RelationshipTupleBlockRead) GetRelation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Relation
}

// GetRelationOk returns a tuple with the Relation field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleBlockRead) GetRelationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relation, true
}

// SetRelation sets field value
func (o *RelationshipTupleBlockRead) SetRelation(v string) {
	o.Relation = v
}

// GetObject returns the Object field value
func (o *RelationshipTupleBlockRead) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *RelationshipTupleBlockRead) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *RelationshipTupleBlockRead) SetObject(v string) {
	o.Object = v
}

func (o RelationshipTupleBlockRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationshipTupleBlockRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subject"] = o.Subject
	toSerialize["relation"] = o.Relation
	toSerialize["object"] = o.Object
	return toSerialize, nil
}

type NullableRelationshipTupleBlockRead struct {
	value *RelationshipTupleBlockRead
	isSet bool
}

func (v NullableRelationshipTupleBlockRead) Get() *RelationshipTupleBlockRead {
	return v.value
}

func (v *NullableRelationshipTupleBlockRead) Set(val *RelationshipTupleBlockRead) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipTupleBlockRead) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipTupleBlockRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipTupleBlockRead(val *RelationshipTupleBlockRead) *NullableRelationshipTupleBlockRead {
	return &NullableRelationshipTupleBlockRead{value: val, isSet: true}
}

func (v NullableRelationshipTupleBlockRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipTupleBlockRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
