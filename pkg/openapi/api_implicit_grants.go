/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"github.com/permitio/permit-golang/pkg/models"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ImplicitGrantsAPIService ImplicitGrantsAPI service
type ImplicitGrantsAPIService service

type ApiCreateImplicitGrantRequest struct {
	ctx                   context.Context
	ApiService            *ImplicitGrantsAPIService
	projId                string
	envId                 string
	resourceId            string
	roleId                string
	derivedRoleRuleCreate *models.DerivedRoleRuleCreate
	permitSession         *string
}

func (r ApiCreateImplicitGrantRequest) DerivedRoleRuleCreate(derivedRoleRuleCreate models.DerivedRoleRuleCreate) ApiCreateImplicitGrantRequest {
	r.derivedRoleRuleCreate = &derivedRoleRuleCreate
	return r
}

func (r ApiCreateImplicitGrantRequest) PermitSession(permitSession string) ApiCreateImplicitGrantRequest {
	r.permitSession = &permitSession
	return r
}

func (r ApiCreateImplicitGrantRequest) Execute() (*models.DerivedRoleRuleRead, *http.Response, error) {
	return r.ApiService.CreateImplicitGrantExecute(r)
}

/*
CreateImplicitGrant Create Implicit Grant

Creates an implicit grant on a given role

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").
	@param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").
	@return ApiCreateImplicitGrantRequest
*/
func (a *ImplicitGrantsAPIService) CreateImplicitGrant(ctx context.Context, projId string, envId string, resourceId string, roleId string) ApiCreateImplicitGrantRequest {
	return ApiCreateImplicitGrantRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
		resourceId: resourceId,
		roleId:     roleId,
	}
}

// Execute executes the request
//
//	@return DerivedRoleRuleRead
func (a *ImplicitGrantsAPIService) CreateImplicitGrantExecute(r ApiCreateImplicitGrantRequest) (*models.DerivedRoleRuleRead, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *models.DerivedRoleRuleRead
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImplicitGrantsAPIService.CreateImplicitGrant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.derivedRoleRuleCreate == nil {
		return localVarReturnValue, nil, reportError("derivedRoleRuleCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.derivedRoleRuleCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteImplicitGrantRequest struct {
	ctx                   context.Context
	ApiService            *ImplicitGrantsAPIService
	projId                string
	envId                 string
	roleId                string
	resourceId            string
	derivedRoleRuleDelete *models.DerivedRoleRuleDelete
	permitSession         *string
}

func (r ApiDeleteImplicitGrantRequest) DerivedRoleRuleDelete(derivedRoleRuleDelete models.DerivedRoleRuleDelete) ApiDeleteImplicitGrantRequest {
	r.derivedRoleRuleDelete = &derivedRoleRuleDelete
	return r
}

func (r ApiDeleteImplicitGrantRequest) PermitSession(permitSession string) ApiDeleteImplicitGrantRequest {
	r.permitSession = &permitSession
	return r
}

func (r ApiDeleteImplicitGrantRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteImplicitGrantExecute(r)
}

/*
DeleteImplicitGrant Delete Implicit Grant

Deletes an implicit grant on a given role

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").
	@param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").
	@return ApiDeleteImplicitGrantRequest
*/
func (a *ImplicitGrantsAPIService) DeleteImplicitGrant(ctx context.Context, projId string, envId string, roleId string, resourceId string) ApiDeleteImplicitGrantRequest {
	return ApiDeleteImplicitGrantRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
		roleId:     roleId,
		resourceId: resourceId,
	}
}

// Execute executes the request
func (a *ImplicitGrantsAPIService) DeleteImplicitGrantExecute(r ApiDeleteImplicitGrantRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImplicitGrantsAPIService.DeleteImplicitGrant")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.derivedRoleRuleDelete == nil {
		return nil, reportError("derivedRoleRuleDelete is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.derivedRoleRuleDelete
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateImplicitGrantsConditionsRequest struct {
	ctx                                                         context.Context
	ApiService                                                  *ImplicitGrantsAPIService
	projId                                                      string
	envId                                                       string
	resourceId                                                  string
	roleId                                                      string
	permitBackendSchemasSchemaDerivedRoleRuleDerivationSettings *models.PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
	permitSession                                               *string
}

func (r ApiUpdateImplicitGrantsConditionsRequest) PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings(permitBackendSchemasSchemaDerivedRoleRuleDerivationSettings models.PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings) ApiUpdateImplicitGrantsConditionsRequest {
	r.permitBackendSchemasSchemaDerivedRoleRuleDerivationSettings = &permitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
	return r
}

func (r ApiUpdateImplicitGrantsConditionsRequest) PermitSession(permitSession string) ApiUpdateImplicitGrantsConditionsRequest {
	r.permitSession = &permitSession
	return r
}

func (r ApiUpdateImplicitGrantsConditionsRequest) Execute() (*models.PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings, *http.Response, error) {
	return r.ApiService.UpdateImplicitGrantsConditionsExecute(r)
}

/*
UpdateImplicitGrantsConditions Update Implicit Grants Conditions

Update the `when` for implicit grants on a given role

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").
	@param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").
	@param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").
	@param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").
	@return ApiUpdateImplicitGrantsConditionsRequest
*/
func (a *ImplicitGrantsAPIService) UpdateImplicitGrantsConditions(ctx context.Context, projId string, envId string, resourceId string, roleId string) ApiUpdateImplicitGrantsConditionsRequest {
	return ApiUpdateImplicitGrantsConditionsRequest{
		ApiService: a,
		ctx:        ctx,
		projId:     projId,
		envId:      envId,
		resourceId: resourceId,
		roleId:     roleId,
	}
}

// Execute executes the request
//
//	@return PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
func (a *ImplicitGrantsAPIService) UpdateImplicitGrantsConditionsExecute(r ApiUpdateImplicitGrantsConditionsRequest) (*models.PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *models.PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ImplicitGrantsAPIService.UpdateImplicitGrantsConditions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/implicit_grants/conditions"
	localVarPath = strings.Replace(localVarPath, "{"+"proj_id"+"}", url.PathEscape(parameterValueToString(r.projId, "projId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"env_id"+"}", url.PathEscape(parameterValueToString(r.envId, "envId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"resource_id"+"}", url.PathEscape(parameterValueToString(r.resourceId, "resourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.permitBackendSchemasSchemaDerivedRoleRuleDerivationSettings == nil {
		return localVarReturnValue, nil, reportError("permitBackendSchemasSchemaDerivedRoleRuleDerivationSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.permitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v models.HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
