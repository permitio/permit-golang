/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RelationCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationCreate{}

// RelationCreate struct for RelationCreate
type RelationCreate struct {
	// A URL-friendly name of the relation (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the relation.
	Key string `json:"key"`
	// The name of the relation
	Name string `json:"name"`
	// An optional longer description of what this relation represents in your system
	Description *string `json:"description,omitempty"`
	// The subject resource ID or key
	SubjectResource string `json:"subject_resource"`
}

// NewRelationCreate instantiates a new RelationCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationCreate(key string, name string, subjectResource string) *RelationCreate {
	this := RelationCreate{}
	this.Key = key
	this.Name = name
	this.SubjectResource = subjectResource
	return &this
}

// NewRelationCreateWithDefaults instantiates a new RelationCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationCreateWithDefaults() *RelationCreate {
	this := RelationCreate{}
	return &this
}

// GetKey returns the Key field value
func (o *RelationCreate) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *RelationCreate) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *RelationCreate) SetKey(v string) {
	o.Key = v
}

// GetName returns the Name field value
func (o *RelationCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RelationCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RelationCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RelationCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RelationCreate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RelationCreate) SetDescription(v string) {
	o.Description = &v
}

// GetSubjectResource returns the SubjectResource field value
func (o *RelationCreate) GetSubjectResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectResource
}

// GetSubjectResourceOk returns a tuple with the SubjectResource field value
// and a boolean to check if the value has been set.
func (o *RelationCreate) GetSubjectResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectResource, true
}

// SetSubjectResource sets field value
func (o *RelationCreate) SetSubjectResource(v string) {
	o.SubjectResource = v
}

func (o RelationCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["subject_resource"] = o.SubjectResource
	return toSerialize, nil
}

type NullableRelationCreate struct {
	value *RelationCreate
	isSet bool
}

func (v NullableRelationCreate) Get() *RelationCreate {
	return v.value
}

func (v *NullableRelationCreate) Set(val *RelationCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationCreate(val *RelationCreate) *NullableRelationCreate {
	return &NullableRelationCreate{value: val, isSet: true}
}

func (v NullableRelationCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
