/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RoleAssignmentUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleAssignmentUser{}

// RoleAssignmentUser struct for RoleAssignmentUser
type RoleAssignmentUser struct {
	Id         string                 `json:"id"`
	Key        string                 `json:"key"`
	Email      *string                `json:"email,omitempty"`
	FirstName  *string                `json:"first_name,omitempty"`
	LastName   *string                `json:"last_name,omitempty"`
	Attributes map[string]interface{} `json:"attributes,omitempty"`
}

// NewRoleAssignmentUser instantiates a new RoleAssignmentUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleAssignmentUser(id string, key string) *RoleAssignmentUser {
	this := RoleAssignmentUser{}
	this.Id = id
	this.Key = key
	return &this
}

// NewRoleAssignmentUserWithDefaults instantiates a new RoleAssignmentUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleAssignmentUserWithDefaults() *RoleAssignmentUser {
	this := RoleAssignmentUser{}
	return &this
}

// GetId returns the Id field value
func (o *RoleAssignmentUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RoleAssignmentUser) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RoleAssignmentUser) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *RoleAssignmentUser) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *RoleAssignmentUser) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *RoleAssignmentUser) SetKey(v string) {
	o.Key = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *RoleAssignmentUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *RoleAssignmentUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *RoleAssignmentUser) SetEmail(v string) {
	o.Email = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *RoleAssignmentUser) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentUser) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *RoleAssignmentUser) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *RoleAssignmentUser) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *RoleAssignmentUser) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentUser) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *RoleAssignmentUser) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *RoleAssignmentUser) SetLastName(v string) {
	o.LastName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *RoleAssignmentUser) GetAttributes() map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentUser) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *RoleAssignmentUser) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *RoleAssignmentUser) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o RoleAssignmentUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleAssignmentUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableRoleAssignmentUser struct {
	value *RoleAssignmentUser
	isSet bool
}

func (v NullableRoleAssignmentUser) Get() *RoleAssignmentUser {
	return v.value
}

func (v *NullableRoleAssignmentUser) Set(val *RoleAssignmentUser) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleAssignmentUser) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleAssignmentUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleAssignmentUser(val *RoleAssignmentUser) *NullableRoleAssignmentUser {
	return &NullableRoleAssignmentUser{value: val, isSet: true}
}

func (v NullableRoleAssignmentUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleAssignmentUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
