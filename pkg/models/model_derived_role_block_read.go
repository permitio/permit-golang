/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DerivedRoleBlockRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DerivedRoleBlockRead{}

// DerivedRoleBlockRead struct for DerivedRoleBlockRead
type DerivedRoleBlockRead struct {
	When *PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings `json:"when,omitempty"`
	// The unique id of the derived_role
	Id string `json:"id"`
	// the rules of the derived role
	UsersWithRole []DerivedRoleRuleRead `json:"users_with_role,omitempty"`
}

// NewDerivedRoleBlockRead instantiates a new DerivedRoleBlockRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDerivedRoleBlockRead(id string) *DerivedRoleBlockRead {
	this := DerivedRoleBlockRead{}
	this.When = &PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings{NoDirectRolesOnObject: PtrBool(false)}
	this.Id = id
	return &this
}

// NewDerivedRoleBlockReadWithDefaults instantiates a new DerivedRoleBlockRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDerivedRoleBlockReadWithDefaults() *DerivedRoleBlockRead {
	this := DerivedRoleBlockRead{}
	this.When = &PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings{NoDirectRolesOnObject: PtrBool(false)}
	return &this
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *DerivedRoleBlockRead) GetWhen() PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings {
	if o == nil || IsNil(o.When) {
		var ret PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivedRoleBlockRead) GetWhenOk() (*PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *DerivedRoleBlockRead) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings and assigns it to the When field.
func (o *DerivedRoleBlockRead) SetWhen(v PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings) {
	o.When = &v
}

// GetId returns the Id field value
func (o *DerivedRoleBlockRead) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleBlockRead) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DerivedRoleBlockRead) SetId(v string) {
	o.Id = v
}

// GetUsersWithRole returns the UsersWithRole field value if set, zero value otherwise.
func (o *DerivedRoleBlockRead) GetUsersWithRole() []DerivedRoleRuleRead {
	if o == nil || IsNil(o.UsersWithRole) {
		var ret []DerivedRoleRuleRead
		return ret
	}
	return o.UsersWithRole
}

// GetUsersWithRoleOk returns a tuple with the UsersWithRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivedRoleBlockRead) GetUsersWithRoleOk() ([]DerivedRoleRuleRead, bool) {
	if o == nil || IsNil(o.UsersWithRole) {
		return nil, false
	}
	return o.UsersWithRole, true
}

// HasUsersWithRole returns a boolean if a field has been set.
func (o *DerivedRoleBlockRead) HasUsersWithRole() bool {
	if o != nil && !IsNil(o.UsersWithRole) {
		return true
	}

	return false
}

// SetUsersWithRole gets a reference to the given []DerivedRoleRuleRead and assigns it to the UsersWithRole field.
func (o *DerivedRoleBlockRead) SetUsersWithRole(v []DerivedRoleRuleRead) {
	o.UsersWithRole = v
}

func (o DerivedRoleBlockRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DerivedRoleBlockRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.When) {
		toSerialize["when"] = o.When
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.UsersWithRole) {
		toSerialize["users_with_role"] = o.UsersWithRole
	}
	return toSerialize, nil
}

type NullableDerivedRoleBlockRead struct {
	value *DerivedRoleBlockRead
	isSet bool
}

func (v NullableDerivedRoleBlockRead) Get() *DerivedRoleBlockRead {
	return v.value
}

func (v *NullableDerivedRoleBlockRead) Set(val *DerivedRoleBlockRead) {
	v.value = val
	v.isSet = true
}

func (v NullableDerivedRoleBlockRead) IsSet() bool {
	return v.isSet
}

func (v *NullableDerivedRoleBlockRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDerivedRoleBlockRead(val *DerivedRoleBlockRead) *NullableDerivedRoleBlockRead {
	return &NullableDerivedRoleBlockRead{value: val, isSet: true}
}

func (v NullableDerivedRoleBlockRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDerivedRoleBlockRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
