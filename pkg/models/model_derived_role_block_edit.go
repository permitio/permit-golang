/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DerivedRoleBlockEdit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DerivedRoleBlockEdit{}

// DerivedRoleBlockEdit struct for DerivedRoleBlockEdit
type DerivedRoleBlockEdit struct {
	When *PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings `json:"when,omitempty"`
	// the rules of the derived role
	UsersWithRole []DerivedRoleRuleCreate `json:"users_with_role,omitempty"`
}

// NewDerivedRoleBlockEdit instantiates a new DerivedRoleBlockEdit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDerivedRoleBlockEdit() *DerivedRoleBlockEdit {
	this := DerivedRoleBlockEdit{}
	this.When = &PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings{NoDirectRolesOnObject: PtrBool(false)}
	return &this
}

// NewDerivedRoleBlockEditWithDefaults instantiates a new DerivedRoleBlockEdit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDerivedRoleBlockEditWithDefaults() *DerivedRoleBlockEdit {
	this := DerivedRoleBlockEdit{}
	this.When = &PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings{NoDirectRolesOnObject: PtrBool(false)}
	return &this
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *DerivedRoleBlockEdit) GetWhen() PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings {
	if o == nil || IsNil(o.When) {
		var ret PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivedRoleBlockEdit) GetWhenOk() (*PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *DerivedRoleBlockEdit) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings and assigns it to the When field.
func (o *DerivedRoleBlockEdit) SetWhen(v PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings) {
	o.When = &v
}

// GetUsersWithRole returns the UsersWithRole field value if set, zero value otherwise.
func (o *DerivedRoleBlockEdit) GetUsersWithRole() []DerivedRoleRuleCreate {
	if o == nil || IsNil(o.UsersWithRole) {
		var ret []DerivedRoleRuleCreate
		return ret
	}
	return o.UsersWithRole
}

// GetUsersWithRoleOk returns a tuple with the UsersWithRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivedRoleBlockEdit) GetUsersWithRoleOk() ([]DerivedRoleRuleCreate, bool) {
	if o == nil || IsNil(o.UsersWithRole) {
		return nil, false
	}
	return o.UsersWithRole, true
}

// HasUsersWithRole returns a boolean if a field has been set.
func (o *DerivedRoleBlockEdit) HasUsersWithRole() bool {
	if o != nil && !IsNil(o.UsersWithRole) {
		return true
	}

	return false
}

// SetUsersWithRole gets a reference to the given []DerivedRoleRuleCreate and assigns it to the UsersWithRole field.
func (o *DerivedRoleBlockEdit) SetUsersWithRole(v []DerivedRoleRuleCreate) {
	o.UsersWithRole = v
}

func (o DerivedRoleBlockEdit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DerivedRoleBlockEdit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.When) {
		toSerialize["when"] = o.When
	}
	if !IsNil(o.UsersWithRole) {
		toSerialize["users_with_role"] = o.UsersWithRole
	}
	return toSerialize, nil
}

type NullableDerivedRoleBlockEdit struct {
	value *DerivedRoleBlockEdit
	isSet bool
}

func (v NullableDerivedRoleBlockEdit) Get() *DerivedRoleBlockEdit {
	return v.value
}

func (v *NullableDerivedRoleBlockEdit) Set(val *DerivedRoleBlockEdit) {
	v.value = val
	v.isSet = true
}

func (v NullableDerivedRoleBlockEdit) IsSet() bool {
	return v.isSet
}

func (v *NullableDerivedRoleBlockEdit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDerivedRoleBlockEdit(val *DerivedRoleBlockEdit) *NullableDerivedRoleBlockEdit {
	return &NullableDerivedRoleBlockEdit{value: val, isSet: true}
}

func (v NullableDerivedRoleBlockEdit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDerivedRoleBlockEdit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
