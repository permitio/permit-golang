/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the RelationBlockRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationBlockRead{}

// RelationBlockRead struct for RelationBlockRead
type RelationBlockRead struct {
	// An optional longer description of what this relation represents in your system
	Description *string `json:"description,omitempty"`
	// Unique id of the relation
	ResourceId string `json:"resource_id"`
	// The resource key
	Resource string `json:"resource"`
}

// NewRelationBlockRead instantiates a new RelationBlockRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationBlockRead(resourceId string, resource string) *RelationBlockRead {
	this := RelationBlockRead{}
	this.ResourceId = resourceId
	this.Resource = resource
	return &this
}

// NewRelationBlockReadWithDefaults instantiates a new RelationBlockRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationBlockReadWithDefaults() *RelationBlockRead {
	this := RelationBlockRead{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RelationBlockRead) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationBlockRead) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RelationBlockRead) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RelationBlockRead) SetDescription(v string) {
	o.Description = &v
}

// GetResourceId returns the ResourceId field value
func (o *RelationBlockRead) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *RelationBlockRead) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *RelationBlockRead) SetResourceId(v string) {
	o.ResourceId = v
}

// GetResource returns the Resource field value
func (o *RelationBlockRead) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *RelationBlockRead) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *RelationBlockRead) SetResource(v string) {
	o.Resource = v
}

func (o RelationBlockRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationBlockRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["resource"] = o.Resource
	return toSerialize, nil
}

type NullableRelationBlockRead struct {
	value *RelationBlockRead
	isSet bool
}

func (v NullableRelationBlockRead) Get() *RelationBlockRead {
	return v.value
}

func (v *NullableRelationBlockRead) Set(val *RelationBlockRead) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationBlockRead) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationBlockRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationBlockRead(val *RelationBlockRead) *NullableRelationBlockRead {
	return &NullableRelationBlockRead{value: val, isSet: true}
}

func (v NullableRelationBlockRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationBlockRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
