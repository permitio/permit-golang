/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DerivedRoleRuleRead type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DerivedRoleRuleRead{}

// DerivedRoleRuleRead struct for DerivedRoleRuleRead
type DerivedRoleRuleRead struct {
	// the role id that needs to exist on the related resource (from the relation)
	RoleId string `json:"role_id"`
	// the resource id that needs to exist on the related role (from the relation)
	ResourceId string `json:"resource_id"`
	// the relation id that needs to exist between the resource and the related resource
	RelationId string `json:"relation_id"`
	// the role key that needs to exist on the related resource (from the relation)
	Role string `json:"role"`
	// the resource key that needs to exist on the related role (from the relation)
	OnResource string `json:"on_resource"`
	// the relation key that needs to exist between the resource and the related resource
	LinkedByRelation string                                                       `json:"linked_by_relation"`
	When             *PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings `json:"when,omitempty"`
}

// NewDerivedRoleRuleRead instantiates a new DerivedRoleRuleRead object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDerivedRoleRuleRead(roleId string, resourceId string, relationId string, role string, onResource string, linkedByRelation string) *DerivedRoleRuleRead {
	this := DerivedRoleRuleRead{}
	this.RoleId = roleId
	this.ResourceId = resourceId
	this.RelationId = relationId
	this.Role = role
	this.OnResource = onResource
	this.LinkedByRelation = linkedByRelation
	this.When = &PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings{NoDirectRolesOnObject: PtrBool(false)}
	return &this
}

// NewDerivedRoleRuleReadWithDefaults instantiates a new DerivedRoleRuleRead object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDerivedRoleRuleReadWithDefaults() *DerivedRoleRuleRead {
	this := DerivedRoleRuleRead{}
	this.When = &PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings{NoDirectRolesOnObject: PtrBool(false)}
	return &this
}

// GetRoleId returns the RoleId field value
func (o *DerivedRoleRuleRead) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleRead) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *DerivedRoleRuleRead) SetRoleId(v string) {
	o.RoleId = v
}

// GetResourceId returns the ResourceId field value
func (o *DerivedRoleRuleRead) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleRead) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *DerivedRoleRuleRead) SetResourceId(v string) {
	o.ResourceId = v
}

// GetRelationId returns the RelationId field value
func (o *DerivedRoleRuleRead) GetRelationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelationId
}

// GetRelationIdOk returns a tuple with the RelationId field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleRead) GetRelationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelationId, true
}

// SetRelationId sets field value
func (o *DerivedRoleRuleRead) SetRelationId(v string) {
	o.RelationId = v
}

// GetRole returns the Role field value
func (o *DerivedRoleRuleRead) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleRead) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *DerivedRoleRuleRead) SetRole(v string) {
	o.Role = v
}

// GetOnResource returns the OnResource field value
func (o *DerivedRoleRuleRead) GetOnResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OnResource
}

// GetOnResourceOk returns a tuple with the OnResource field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleRead) GetOnResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnResource, true
}

// SetOnResource sets field value
func (o *DerivedRoleRuleRead) SetOnResource(v string) {
	o.OnResource = v
}

// GetLinkedByRelation returns the LinkedByRelation field value
func (o *DerivedRoleRuleRead) GetLinkedByRelation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkedByRelation
}

// GetLinkedByRelationOk returns a tuple with the LinkedByRelation field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleRead) GetLinkedByRelationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkedByRelation, true
}

// SetLinkedByRelation sets field value
func (o *DerivedRoleRuleRead) SetLinkedByRelation(v string) {
	o.LinkedByRelation = v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *DerivedRoleRuleRead) GetWhen() PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings {
	if o == nil || IsNil(o.When) {
		var ret PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleRead) GetWhenOk() (*PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *DerivedRoleRuleRead) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings and assigns it to the When field.
func (o *DerivedRoleRuleRead) SetWhen(v PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings) {
	o.When = &v
}

func (o DerivedRoleRuleRead) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DerivedRoleRuleRead) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role_id"] = o.RoleId
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["relation_id"] = o.RelationId
	toSerialize["role"] = o.Role
	toSerialize["on_resource"] = o.OnResource
	toSerialize["linked_by_relation"] = o.LinkedByRelation
	if !IsNil(o.When) {
		toSerialize["when"] = o.When
	}
	return toSerialize, nil
}

type NullableDerivedRoleRuleRead struct {
	value *DerivedRoleRuleRead
	isSet bool
}

func (v NullableDerivedRoleRuleRead) Get() *DerivedRoleRuleRead {
	return v.value
}

func (v *NullableDerivedRoleRuleRead) Set(val *DerivedRoleRuleRead) {
	v.value = val
	v.isSet = true
}

func (v NullableDerivedRoleRuleRead) IsSet() bool {
	return v.isSet
}

func (v *NullableDerivedRoleRuleRead) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDerivedRoleRuleRead(val *DerivedRoleRuleRead) *NullableDerivedRoleRuleRead {
	return &NullableDerivedRoleRuleRead{value: val, isSet: true}
}

func (v NullableDerivedRoleRuleRead) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDerivedRoleRuleRead) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
