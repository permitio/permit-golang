/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DerivedRoleRuleCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DerivedRoleRuleCreate{}

// DerivedRoleRuleCreate struct for DerivedRoleRuleCreate
type DerivedRoleRuleCreate struct {
	// the role key that needs to exist on the related resource (from the relation)
	Role string `json:"role"`
	// the resource key that needs to exist on the related role (from the relation)
	OnResource string `json:"on_resource"`
	// the relation key that needs to exist between the resource and the related resource
	LinkedByRelation string                                                       `json:"linked_by_relation"`
	When             *PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings `json:"when,omitempty"`
}

// NewDerivedRoleRuleCreate instantiates a new DerivedRoleRuleCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDerivedRoleRuleCreate(role string, onResource string, linkedByRelation string) *DerivedRoleRuleCreate {
	this := DerivedRoleRuleCreate{}
	this.Role = role
	this.OnResource = onResource
	this.LinkedByRelation = linkedByRelation
	this.When = &PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings{NoDirectRolesOnObject: PtrBool(false)}
	return &this
}

// NewDerivedRoleRuleCreateWithDefaults instantiates a new DerivedRoleRuleCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDerivedRoleRuleCreateWithDefaults() *DerivedRoleRuleCreate {
	this := DerivedRoleRuleCreate{}
	this.When = &PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings{NoDirectRolesOnObject: PtrBool(false)}
	return &this
}

// GetRole returns the Role field value
func (o *DerivedRoleRuleCreate) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleCreate) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *DerivedRoleRuleCreate) SetRole(v string) {
	o.Role = v
}

// GetOnResource returns the OnResource field value
func (o *DerivedRoleRuleCreate) GetOnResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OnResource
}

// GetOnResourceOk returns a tuple with the OnResource field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleCreate) GetOnResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnResource, true
}

// SetOnResource sets field value
func (o *DerivedRoleRuleCreate) SetOnResource(v string) {
	o.OnResource = v
}

// GetLinkedByRelation returns the LinkedByRelation field value
func (o *DerivedRoleRuleCreate) GetLinkedByRelation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkedByRelation
}

// GetLinkedByRelationOk returns a tuple with the LinkedByRelation field value
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleCreate) GetLinkedByRelationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkedByRelation, true
}

// SetLinkedByRelation sets field value
func (o *DerivedRoleRuleCreate) SetLinkedByRelation(v string) {
	o.LinkedByRelation = v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *DerivedRoleRuleCreate) GetWhen() PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings {
	if o == nil || IsNil(o.When) {
		var ret PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivedRoleRuleCreate) GetWhenOk() (*PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings, bool) {
	if o == nil || IsNil(o.When) {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *DerivedRoleRuleCreate) HasWhen() bool {
	if o != nil && !IsNil(o.When) {
		return true
	}

	return false
}

// SetWhen gets a reference to the given PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings and assigns it to the When field.
func (o *DerivedRoleRuleCreate) SetWhen(v PermitBackendSchemasSchemaDerivedRoleRuleDerivationSettings) {
	o.When = &v
}

func (o DerivedRoleRuleCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DerivedRoleRuleCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["on_resource"] = o.OnResource
	toSerialize["linked_by_relation"] = o.LinkedByRelation
	if !IsNil(o.When) {
		toSerialize["when"] = o.When
	}
	return toSerialize, nil
}

type NullableDerivedRoleRuleCreate struct {
	value *DerivedRoleRuleCreate
	isSet bool
}

func (v NullableDerivedRoleRuleCreate) Get() *DerivedRoleRuleCreate {
	return v.value
}

func (v *NullableDerivedRoleRuleCreate) Set(val *DerivedRoleRuleCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableDerivedRoleRuleCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableDerivedRoleRuleCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDerivedRoleRuleCreate(val *DerivedRoleRuleCreate) *NullableDerivedRoleRuleCreate {
	return &NullableDerivedRoleRuleCreate{value: val, isSet: true}
}

func (v NullableDerivedRoleRuleCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDerivedRoleRuleCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
