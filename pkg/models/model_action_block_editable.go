/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the ActionBlockEditable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionBlockEditable{}

// ActionBlockEditable struct for ActionBlockEditable
type ActionBlockEditable struct {
	// a more descriptive name for the action
	Name *string `json:"name,omitempty"`
	// optional description string explaining what this action represents in your system
	Description *string                `json:"description,omitempty"`
	Attributes  map[string]interface{} `json:"attributes,omitempty"`
}

// NewActionBlockEditable instantiates a new ActionBlockEditable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionBlockEditable() *ActionBlockEditable {
	this := ActionBlockEditable{}
	return &this
}

// NewActionBlockEditableWithDefaults instantiates a new ActionBlockEditable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionBlockEditableWithDefaults() *ActionBlockEditable {
	this := ActionBlockEditable{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActionBlockEditable) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionBlockEditable) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActionBlockEditable) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActionBlockEditable) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ActionBlockEditable) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionBlockEditable) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ActionBlockEditable) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ActionBlockEditable) SetDescription(v string) {
	o.Description = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ActionBlockEditable) GetAttributes() map[string]interface{} {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionBlockEditable) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ActionBlockEditable) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *ActionBlockEditable) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o ActionBlockEditable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionBlockEditable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableActionBlockEditable struct {
	value *ActionBlockEditable
	isSet bool
}

func (v NullableActionBlockEditable) Get() *ActionBlockEditable {
	return v.value
}

func (v *NullableActionBlockEditable) Set(val *ActionBlockEditable) {
	v.value = val
	v.isSet = true
}

func (v NullableActionBlockEditable) IsSet() bool {
	return v.isSet
}

func (v *NullableActionBlockEditable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionBlockEditable(val *ActionBlockEditable) *NullableActionBlockEditable {
	return &NullableActionBlockEditable{value: val, isSet: true}
}

func (v NullableActionBlockEditable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionBlockEditable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
