/*
Permit.io API

 Authorization as a service

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// CopyEnvironmentScopeRoles struct for CopyEnvironmentScopeRoles
type Roles struct {
	PaginatedResultResourceRoleRead *PaginatedResultResourceRoleRead
	ResourceRoleRead                *[]ResourceRoleRead
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Roles) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into PaginatedResultResourceRoleRead
	err = json.Unmarshal(data, &dst.PaginatedResultResourceRoleRead)
	if err == nil {
		jsonPaginatedResultResourceRoleRead, _ := json.Marshal(dst.PaginatedResultResourceRoleRead)
		if string(jsonPaginatedResultResourceRoleRead) == "{}" { // empty struct
			dst.PaginatedResultResourceRoleRead = nil
		} else {
			return nil // data stored in dst.PaginatedResultResourceRoleRead, return on the first match
		}
	} else {
		dst.PaginatedResultResourceRoleRead = nil
	}

	// try to unmarshal JSON data into []ResourceRoleRead
	err = json.Unmarshal(data, &dst.ResourceRoleRead)
	if err == nil {
		jsonResourceRoleRead, _ := json.Marshal(dst.ResourceRoleRead)
		if string(jsonResourceRoleRead) == "{}" { // empty struct
			dst.ResourceRoleRead = nil
		} else {
			return nil // data stored in dst.[]ResourceRoleRead, return on the first match
		}
	} else {
		dst.ResourceRoleRead = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CopyEnvironmentScopeRoles)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Roles) MarshalJSON() ([]byte, error) {
	if src.PaginatedResultResourceRoleRead != nil {
		return json.Marshal(&src.PaginatedResultResourceRoleRead)
	}

	if src.ResourceRoleRead != nil {
		return json.Marshal(&src.ResourceRoleRead)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableRoles struct {
	value *Roles
	isSet bool
}

func (v NullableRoles) Get() *Roles {
	return v.value
}

func (v *NullableRoles) Set(val *Roles) {
	v.value = val
	v.isSet = true
}

func (v NullableRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoles(val *Roles) *NullableRoles {
	return &NullableRoles{value: val, isSet: true}
}

func (v NullableRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
